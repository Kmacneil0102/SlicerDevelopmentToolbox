@startuml

skinparam classBackgroundColor white

package "qt" #41cd52 {

  class QWidget
  class QMessageBox
  class QGroupBox
  class DICOMProcess
  class QPushButton
}

package "buttons" #0077ff {
  abstract class BasicIconButton {
    + {abstract} ICON_FILENAME=None
    + buttonIcon
    __
    + onAboutToBeDestroyed(obj)
    # _connectSignals()

  }

  abstract class CheckableIconButton {
    .. slots ..
    {abstract} onToggled(checked)
  }

  abstract class LayoutButton {
     + {abstract} LAYOUT=None
     __
     .. properties ..
     + layoutManager
     .. slots ..
     + onLayoutChanged(layout)
  }

  class ModuleSettingsButton {
    .. slots ..
    + onClicked()
  }

  class RedSliceLayoutButton {
    + LAYOUT=slicer.vtkMRMLLayoutNode.SlicerLayoutOneUpRedSliceView
  }

  class FourUpLayoutButton {
    + LAYOUT=slicer.vtkMRMLLayoutNode.SlicerLayoutFourUpView
  }

  class FourUpTableViewLayoutButton {
    + LAYOUT=slicer.vtkMRMLLayoutNode.SlicerLayoutFourUpTableView
  }

  class SideBySideLayoutButton {
    + LAYOUT=slicer.vtkMRMLLayoutNode.SlicerLayoutSideBySideView
  }

  class CrosshairButton{
    + DEFAULT_CROSSHAIR_MODE=slicer.vtkMRMLCrosshairNode.ShowSmallBasic
    __
    # _setCrosshairMode(mode)
    # _setSliceIntersectionEnabled(enabled)
    # _connectCrosshairNode()
    # _disconnectCrosshairNode()
    .. slots ..
    + onCursorPositionChanged()
  }

  class WindowLevelEffectsButton {
    .. properties ..
    + sliceWidgets
    __
    + wlEffects: dict(sliceWidget:WindowLevelEffect)
    __
    + refreshForAllAvailableSliceWidgets()
    + cleanupSliceWidgets()
    + addSliceWidget(sliceWidget)
    + removeSliceWidget(sliceWidget)
    __
    # _enableWindowLevelEffects()
    # _disableWindowLevelEffects()
  }

  BasicIconButton <|-- ModuleSettingsButton
  CheckableIconButton <|-- LayoutButton
  LayoutButton <|-- RedSliceLayoutButton
  LayoutButton <|-- FourUpLayoutButton
  LayoutButton <|-- FourUpTableViewLayoutButton
  LayoutButton <|-- SideBySideLayoutButton

  BasicIconButton <|-- CheckableIconButton
  CheckableIconButton <|-- CrosshairButton
  CheckableIconButton <|-- WindowLevelEffectsButton

}

package "helpers" #008822 {
  class SampleDataDownloader {
    .. events ..
    + StatusChangedEvent
    + DownloadCanceledEvent
    + DownloadFinishedEvent
    + DownloadFailedEvent
    __
    + downloadFileIntoCache(uri, name)
    + downloadFile(uri, destFolderPath, name)
    + cancelDownload()
  }

  class DirectoryWatcher {
    .. events ..
    + StartedWatchingEvent
    + StoppedWatchingEvent
    + IncomingFileCountChangedEvent
    __
    + start()
    + stop()
    __
    # _startWatching()
    # _onFileCountChanged(count)
  }

  class TimeoutDirectoryWatcher {
    .. events ..
    + IncomingDataReceiveFinishedEvent
    __
    # _checkIfStillSameFileCount()
  }

  class SmartDICOMReceiver {
    .. events ..
    + StatusChangedEvent
    + DICOMReceiverStartedEvent
    + DICOMReceiverStoppedEvent
    + IncomingDataReceiveFinishedEvent
    + IncomingFileCountChangedEvent
    .. slots ..
    + onDataReceivedFinished()
    + onIncomingFileCountChanged(caller, event, callData)
    __
    + start(runStoreSCP=True)
    + stop()
    + startStoreSCP()
    + stopStoreSCP()
    + forceStatusChangeEventUpdate()
    __
    # _updateStatus(text)
  }
  class WindowLevelEffect {
    + enable()
    + disable()
    __
    # _updateNodeWL(node, startWindowLevel, startXY)
    # _createWLCursor()
    # _processEvent(caller, event)
  }

  class SliceAnnotation
  class WatchBoxAttribute {
    + MASKED_PLACEHOLDER="X"
    + TRUNCATE_LENGTH=None
    .. properties ..
    + title
    + masked
    + value
    + originalValue
    __
    + maskedValue(value):string
    + updateVisibleValues(value)

  }

  DICOMProcess <|-- DICOMDirectorySender
}


package "widgets" #00FFFF {
  class SettingsMessageBox {
    + moduleName
    + keyElementPairs: dict
    __
    + getSettingNames(): []
    .. slots ..
    + onOkButtonClicked()

  }

  class CustomStatusProgressbar {
    + STYLE="QWidget{background-color:#FFFFFF;}"
    .. properties ..
    + text
    + value
    + maximum
    __
    + reset()
    + updateStatus(text, value=None)
    + refreshProgressVisibility()
  }

  class TargetCreationWidget {
    + HEADERS=["Name","Delete"]
    + MODIFIED_EVENT="ModifiedEvent"
    + DEFAULT_FIDUCIAL_LIST_NAME=None
    + DEFAULT_CREATE_FIDUCIALS_TEXT="Place Target(s)"
    + DEFAULT_MODIFY_FIDUCIALS_TEXT="Modify Target(s)"
    + ICON_SIZE=qt.QSize(24, 24)
    .. events ..
    + TargetingStartedEvent
    + TargetingFinishedEvent
    .. properties ..
    + currentNode
    + targetListSelectorVisible
    __
    + startPlacing()
    + stopPlacing()
    + getOrCreateFiducialNode()
    + createNewFiducialNode(name=None)
    + resetTable()
    + cleanupButtons()
    + updateButtons()
    + handleDeleteButtonClicked(idx)
    + addTargetListObservers()
    + removeTargetListObservers()
    + hasTargetListAtLeastOneTarget(): boolean
    __
    # _processKwargs(**kwargs)
    # _addDeleteButton()
    .. slots ..
    + onInteractionModeChanged(caller, event)
    + onFiducialListSelected(node)
    + onFiducialsUpdated(caller, event)
    + onCellChanged(row, col)
  }
  class ExtendedQMessageBox
  class IncomingDataWindow
  class RatingWindow {
    .. events ..
    + RatingWindowClosedEvent
    .. properties ..
    + maximumValue
    __
    + text
    __
    + isRatingEnabled(): boolean
    + eventFilter(obj, event)
    + onRatingButtonClicked(buttonId)
    __
    # _connectButtons()
    # _disconnectButtons()
    # _onHoverEvent(obj)
    # _onLeaveEvent()
  }

  class BasicInformationWatchBox {
    + DEFAULT_STYLE='background-color: rgb(230,230,230)'
    + PREFERRED_DATE_FORMAT="%Y-%b-%d"
    __
    + reset()
    + checkAttributeUniqueness(): boolean
    + getAttribute(name): WatchBoxAttribute
    __
    + attributes
  }

  class FileBasedInformationWatchBox {
    + FileBasedInformationWatchBox=": "
    + DEFAULT_TAG_NAME_SEPARATOR="_"
    .. properties ..
    + sourceFile
    __
    + updateInformation()
    + updateInformationFromWatchBoxAttribute(attribute)
    __
    # _getTagNameFromTagNames(tagNames)
    # _getTagValueFromTagValues(values)


  }
  class XMLBasedInformationWatchBox

  class DICOMBasedInformationWatchBox {
    + DATE_TAGS_TO_FORMAT=[DICOMTAGS.STUDY_DATE, DICOMTAGS.PATIENT_BIRTH_DATE]
    + updateInformationFromWatchBoxAttribute(attribute)
  }

  BasicInformationWatchBox <|-- FileBasedInformationWatchBox
  FileBasedInformationWatchBox <|-- XMLBasedInformationWatchBox
  FileBasedInformationWatchBox <|-- DICOMBasedInformationWatchBox
}

WatchBoxAttribute <.. BasicInformationWatchBox::attributes

package "mixins" #c3ff00 {
  class ParameterNodeObservationMixin
  class GeneralModuleMixin
  class ModuleWidgetMixin
  class ModuleLogicMixin

  ParameterNodeObservationMixin <|-- GeneralModuleMixin
  GeneralModuleMixin <|-- ModuleWidgetMixin
  GeneralModuleMixin <|-- ModuleLogicMixin

}

package "metaclasses" #d398aa {
  class Singleton
}

package "decorators" #97b7d2 {
  class logmethod
  class onModuleSelected
  class MultiMethod
  class processEventsEvery
}

SettingsMessageBox <.. ModuleSettingsButton: uses
WindowLevelEffect <.. WindowLevelEffectsButton::wlEffects : 0..n


ParameterNodeObservationMixin <|-- SampleDataDownloader
FancyURLopener <|-- SampleDataDownloader

DirectoryWatcher <|-- TimeoutDirectoryWatcher

ModuleLogicMixin <|-- SmartDICOMReceiver
ModuleLogicMixin <|-- DirectoryWatcher

ModuleWidgetMixin <|-- IncomingDataWindow
ModuleWidgetMixin <|-- TargetCreationWidget
ModuleWidgetMixin <|-- RatingWindow

QWidget <|-- IncomingDataWindow
QWidget <|-- TargetCreationWidget
QWidget <|-- CustomStatusProgressbar
QWidget <|-- RatingWindow

QMessageBox <|-- SettingsMessageBox
QMessageBox <|-- ExtendedQMessageBox

QGroupBox <|-- BasicInformationWatchBox

QPushButton <|-- BasicIconButton



@enduml